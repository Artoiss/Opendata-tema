{"version":3,"sources":["components/Logo/hubert_logo_color.svg","components/Button/Button.js","components/Card/Card.js","components/Logo/Logo.js","components/QRReader/QRReader.js","App.js","serviceWorker.js","Store.js","Main.js","index.js"],"names":["module","exports","Button","props","color","variant","onClick","children","Card","CardActionArea","CardMedia","className","image","title","CardContent","Typography","name","size","price","desc","Logo","width","height","src","logo","alt","QRReader","useState","undefined","result","setResult","showScanner","delay","onScan","data","hideScanner","onError","error","console","log","App","state","this","handleScannerClick","setState","React","Component","Boolean","window","location","hostname","match","Store","Main","to","path","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,+C,4PCW5BC,EARA,SAACC,GACZ,OACI,kBAAC,IAAD,CAAWC,MAAOD,EAAMC,MAAOC,QAASF,EAAME,QAASC,QAASH,EAAMG,SACjEH,EAAMI,W,wCC+BJC,G,MA7BF,SAACL,GACV,OACI,kBAAC,IAAD,KACI,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,UAAW,aACXC,MAAO,4GACPC,MAAO,cAEX,kBAACC,EAAA,EAAD,KACI,yBAAKH,UAAW,eACZ,kBAACI,EAAA,EAAD,CAAYV,QAAS,MAChBF,EAAMa,KAAO,IAAKb,EAAMc,MAE7B,kBAACF,EAAA,EAAD,CAAYV,QAAS,MAChBF,EAAMe,QAGf,yBAAKP,UAAW,gBACZ,kBAACI,EAAA,EAAD,CAAYV,QAAS,SAChBF,EAAMgB,Y,iBCnBpBC,EANF,SAACjB,GACV,OACI,yBAAKkB,MAAOlB,EAAMkB,MAAOC,OAAQnB,EAAMmB,OAAQC,IAAKC,IAAMC,IAAK,U,yBC2BxDC,G,MA5BE,SAACvB,GAAW,IAAD,EACIwB,wBAASC,GADb,mBACjBC,EADiB,KACTC,EADS,KAEjBC,EAAe5B,EAAf4B,YAaP,OACI,yBAAKpB,UAAW,eACXoB,GACG,kBAAC,IAAD,CACIC,MAAO,IACPC,OAhBG,SAACC,GACZA,IACAJ,EAAUI,GACV/B,EAAMgC,gBAcEC,QAVI,SAACC,GACjBC,QAAQC,IAAIF,MAWPR,GAAU,uBAAGlB,UAAW,iBAAkBkB,MCiBxCW,G,kBAvCX,WAAYrC,GAAQ,IAAD,8BACf,4CAAMA,KACDsC,MAAQ,CACTV,aAAa,GAHF,E,sEAOT,IAAD,OACEA,EAAeW,KAAKD,MAApBV,YACP,OACI,yBAAKpB,UAAU,YACX,4BAAQA,UAAU,oBACd,kBAAC,EAAD,CAAMU,MAAO,QAASC,OAAQ,UAC9B,uBAAGX,UAAW,UAAd,mCACA,kBAAC,EAAD,CAAQP,MAAO,UAAWC,QAAS,YAAaC,QAAS,kBAAM,EAAKqC,uBAApE,YAGA,yBAAKhC,UAAW,oBACZ,kBAAC,EAAD,CAAUoB,YAAaA,EAAaI,YAAa,kBAAM,EAAKA,qB,2CAO5EO,KAAKE,SACD,CACIb,aAAcW,KAAKD,MAAMV,gB,oCAMjCW,KAAKE,SAAS,CACVb,aAAa,Q,GAnCPc,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCCSC,E,iLAdP,OACI,6BACI,kBAAC,EAAD,CACIxC,MAAO,mEACPI,KAAM,QACNC,KAAM,KACNC,MAAO,WACPC,KAAM,2C,GATN0B,IAAMC,WCgCXO,EA5BF,WACX,OAEI,6BACE,kBAAC,IAAD,KACE,6BACE,6BAEA,kBAAC,IAAD,CAAMC,GAAG,SACT,kBAAC,EAAD,CAAQlD,MAAO,UAAWC,QAAS,aAAnC,SAIA,kBAAC,IAAD,CAAMiD,GAAG,UACT,kBAAC,EAAD,CAAQlD,MAAO,UAAWC,QAAS,aAAnC,WAIA,kBAAC,IAAD,CAAOkD,KAAK,QAAQC,OAAQ,kBAAK,kBAAC,EAAD,SACjC,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAK,kBAAC,EAAD,aCpB9CC,IAASD,OAAO,kBAAC,EAAD,MAAUE,SAASC,eAAe,SH2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca8e2845.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hubert_logo_color.ce674f71.svg\";","import React from 'react';\nimport {default as MUIButton} from '@material-ui/core/Button';\n\nconst Button = (props) => {\n    return (\n        <MUIButton color={props.color} variant={props.variant} onClick={props.onClick}>\n            {props.children}\n        </MUIButton>\n    )\n};\n\nexport default Button;","import React from 'react';\nimport {default as MUICard} from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from \"@material-ui/core/Typography\";\nimport \"./Card.scss\";\n\nconst Card = (props) => {\n    return (\n        <MUICard>\n            <CardActionArea>\n                <CardMedia\n                    className={\"card-media\"}\n                    image={\"https://cdn.shopify.com/s/files/1/0108/6324/7424/products/descente-stock-ski-pant-2020-orange-1_2000x.jpg\"}\n                    title={\"cardImage\"}\n                />\n                <CardContent>\n                    <div className={\"card-header\"}>\n                        <Typography variant={'h5'}>\n                            {props.name + \" \"}{props.size}\n                        </Typography>\n                        <Typography variant={'h5'}>\n                            {props.price}\n                        </Typography>\n                    </div>\n                    <div className={\"card-content\"}>\n                        <Typography variant={'body2'}>\n                            {props.desc}\n                        </Typography>\n                    </div>\n                </CardContent>\n            </CardActionArea>\n        </MUICard>\n    )\n};\n\nexport default Card;","import React from 'react';\nimport logo from './hubert_logo_color.svg';\n\nconst Logo = (props) => {\n    return (\n        <img width={props.width} height={props.height} src={logo} alt={\"logo\"} />\n    )\n};\n\nexport default Logo;","import React, {useState} from 'react';\nimport QrReader from 'react-qr-reader';\nimport './QRReader.scss';\n\nconst QRReader = (props) => {\n    const [result, setResult] = useState(undefined);\n    const {showScanner} = props;\n\n    const handleScan = (data) => {\n        if (data) {\n            setResult(data);\n            props.hideScanner()\n        }\n    };\n\n    const handleError = (error) => {\n        console.log(error)\n    };\n\n    return (\n        <div className={'reader-root'}>\n            {showScanner && (\n                <QrReader\n                    delay={300}\n                    onScan={handleScan}\n                    onError={handleError}\n                />)}\n            {result && <p className={'reader-result'}>{result}</p>}\n        </div>\n    )\n};\n\nexport default QRReader;","import React from 'react';\nimport {QRReader, Logo, Button} from './components/index'\nimport './App.scss';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showScanner: false\n        }\n    }\n\n    render() {\n        const {showScanner} = this.state;\n        return (\n            <div className='app-root'>\n                <header className='header-container'>\n                    <Logo width={'300px'} height={'150px'} />\n                    <p className={'header'}>Scan QR-code from your package.</p>\n                    <Button color={'primary'} variant={'contained'} onClick={() => this.handleScannerClick()}>Scan\n                        QR</Button>\n                </header>\n                    <div className={'reader-container'}>\n                        <QRReader showScanner={showScanner} hideScanner={() => this.hideScanner()} />\n                    </div>\n            </div>\n        );\n    }\n\n    handleScannerClick() {\n        this.setState(\n            {\n                showScanner: !this.state.showScanner\n            }\n        )\n    }\n\n    hideScanner() {\n        this.setState({\n            showScanner: false\n        })\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Card } from './components/index'\n\nclass Store extends React.Component {\n    render() {\n        return(\n            <div>\n                <Card\n                    image={\"https://www.esportspedia.com/streamers/images/6/6f/ScarraNew.png\"}\n                    name={\"Pants\"}\n                    size={\"XL\"}\n                    price={\"60€\"}\n                    desc={\"New red skiing pants, never used.\"}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Store;","import React from 'react';\nimport {BrowserRouter as Router, Route, Link,\n  Redirect, withRouter} from 'react-router-dom'\nimport App from './App'\nimport Store from './Store'\nimport {Button, Logo} from './components/index'\n\nconst Main = () => {\n  return (\n\n      <div>\n        <Router>\n          <div>\n            <div>\n\n            <Link to=\"/sell\">\n            <Button color={'primary'} variant={'contained'}>\n                Sell</Button>\n            </Link>\n\n            <Link to=\"/store\">\n            <Button color={'primary'} variant={'contained'}>\n                Store</Button>\n            </Link>\n            </div>\n            <Route path=\"/sell\" render={() =><App/> }/>\n            <Route path=\"/store\" render={() =><Store/> }/>\n          </div>\n        </Router>\n      </div>\n    )\n  }\n\n\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './Main'\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}